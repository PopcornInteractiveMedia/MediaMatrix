apply plugin: 'java'
apply plugin: 'application'

mainClassName = 'mediamatrix.MediaMatrix'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
if (!hasProperty('mainClass')) {
    ext.mainClass = 'mediamatrix.MediaMatrix'
}

repositories {
    mavenCentral()
    maven {
        url 'http://bits.netbeans.org/maven2/'
    }
}

dependencies {
    compile 'org.apache.commons:commons-jexl:2.1.1'
    compile 'commons-logging:commons-logging:1.2'
    compile 'com.fasterxml.jackson.core:jackson-core:2.4.4'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.4.4'
    compile 'org.jfree:jcommon:1.0.23'
    compile 'org.jfree:jfreechart:1.0.19'
    compile 'org.swinglabs.swingx:swingx-all:1.6.5-1'
    compile 'org.netbeans.external:AbsoluteLayout:latest.release'
    compile 'org.netbeans.external:swing-layout-1.0.4:latest.release'
    testCompile 'junit:junit:4.10'
}


jar.doFirst {
    manifest {
        def manifestFile = "${projectDir}/src/main/resources/META-INF/MANIFEST.MF"
        if ( new File( manifestFile ).exists() )
        from ( manifestFile )
        def requiredProjects = ''
        configurations.compile.getAllDependencies().withType(ProjectDependency).each {dep->
            def dependantProjects = dep.getDependencyProject()
            def projects = project(dependantProjects.path).libsDir.list().findAll{it.endsWith('.jar')}
            projects.removeAll(projects.findAll{it.endsWith('test.jar')})
            def requiredProject = projects.join(' ')
            requiredProjects +=  requiredProject.replaceAll(/ /,'%20') + ' '
            logger.info 'Required Project: ' + requiredProject
        }
        logger.info 'Required requiredProjects: ' + requiredProjects

        def compileFiles = configurations.compile.files{ it instanceof ExternalDependency }.collect  {
            File file = it
            "lib/${file.name}"
        }.join(' ')

        def manifestPath = requiredProjects + compileFiles
        logger.info 'Manifest: '+ manifestPath
        attributes 'Class-Path': manifestPath
        attributes 'Build-date': new Date();
        attributes 'Application-Version': project.version
    }
}